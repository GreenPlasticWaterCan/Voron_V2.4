# Base
[include macros/base/cancel_print.cfg]
[include macros/base/control.cfg]
[include macros/base/end_print.cfg]
[include macros/base/park.cfg]
[include macros/base/pause_resume.cfg]
[include macros/base/start_print.cfg]
# [include macros/base/caselights.cfg]
# [include macros/base/status_leds.cfg]
# Homing
[include macros/base/homing/homing_conditional.cfg]
[include macros/base/homing/homing_override.cfg]
# [include macros/base/homing/tilting.cfg]
# [include macros/base/homing/z_calibration.cfg]
# Helpers
[include macros/helpers/bed_heater_ctrl.cfg]
[include macros/helpers/filament_swap.cfg]
[include macros/helpers/heatsoak.cfg]
[include macros/helpers/hotend_heater_ctrl.cfg]
[include macros/helpers/nozzle_cleaning.cfg]
[include macros/helpers/prime_line.cfg]
[include macros/helpers/resonance_override.cfg]
# [include macros/helpers/spoolman.cfg]
# [include macros/helpers/tachmeter_check.cfg]
[include macros/helpers/temp_check.cfg]
[include macros/base/probing/generic_probe.cfg]
# [include macros/base/probing/overrides/qgl.cfg]
[include macros/hardware_functions/filter.cfg].
[include macros/hardware_functions/status_leds.cfg]
[include variables.cfg]
[include K-ShakeTune/*.cfg]

# [gcode_macro PAUSE]
# rename_existing: BASE_PAUSE
# gcode:
#     # Parameters
#     {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

#     {% if printer['pause_resume'].is_paused|int == 0 %}
#         SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
#         SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

#         SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
#         SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
#         BASE_PAUSE                                                                           ; pause print
#         {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
#             G91                                                                              ; relative positioning
#             G1 Z{z} F900                                                                     ; raise Z up by z hop amount
#         {% else %}
#             { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
#             SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
#         {% endif %}
#         G90                                                                                  ; absolute positioning
#         G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
#         SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
#         M104 S0                                                                              ; turn off hotend
#         SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
#     {% endif %}
	
# [gcode_macro RESUME]
# rename_existing: BASE_RESUME
# variable_zhop: 0
# variable_etemp: 0
# gcode:
#     # Parameters
#     {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

#     {% if printer['pause_resume'].is_paused|int == 1 %}
#         SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
#         #INITIAL_RGB                                                                    ; reset LCD color
#         SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
#         {% if etemp > 0 %}
#             M109 S{etemp|int}                                                        ; wait for hotend to heat back up
#         {% endif %}
#         RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
#         G91                                                                          ; relative positioning
#         M83                                                                          ; relative extruder positioning
#         {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
#             G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
#         {% else %}
#             G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
#         {% endif %}
#         RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
#         BASE_RESUME                                                                  ; resume print
#     {% endif %}
	
# [gcode_macro CANCEL_PRINT]
# rename_existing: BASE_CANCEL_PRINT
# gcode:
#     SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
#     CLEAR_PAUSE
#     SDCARD_RESET_FILE
#     PRINT_END
#     BASE_CANCEL_PRINT

[gcode_macro _HOME_X]
gcode = 
	
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
	{% set HOME_CURRENT = 0.80%}
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	
	SET_KINEMATIC_POSITION X=15
	G91
	G1 X-15 F1200
	
	G4 P2000
	G28 X
	
	
	G91
	G1 X-15 F1200
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode = 
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
	{% set HOME_CURRENT =0.75%}
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	
	SET_KINEMATIC_POSITION Y=15
	G91
	G1 Y-15 F1200
	G4 P2000
	
	G28 Y
	
	G91
	G1 Y-15 F1200
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro M701]
description = Map M701 to LOAD_FILAMENT
gcode = 
	LOAD_FILAMENT

[gcode_macro M702]
description = Map M702 to UNLOAD_FILAMENT
gcode = 
	UNLOAD_FILAMENT

[gcode_macro M600]
description = Map M600 to CHANGE_FILAMENT
gcode = 
	CHANGE_FILAMENT

[gcode_macro M125]
description = Map M125 to PARK
gcode = 
	PARK

[gcode_macro M900]
description = Map M900 to SET_PRESSURE_ADVANCE
gcode = 
	{% if 'K' in params %}
	{% if 'E' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
	{% else %}
	SET_PRESSURE_ADVANCE ADVANCE={params.K}
	{% endif %}
	{% endif %}

[gcode_macro M204]
description = Map M204 to SET_VELOCITY_LIMIT for ACCEL
rename_existing = M204.1
gcode = 
	{% if 'S' in params %}
	{% set S = params.S|float %}
	SET_VELOCITY_LIMIT ACCEL={S}
	{% endif %}

[gcode_macro M205]
description = Map M205 to SET_VELOCITY_LIMIT for SQUARE_CORNER_VELOCITY
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
	{% elif 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
	{% endif %}

[gcode_macro G00]
gcode = 
	G0 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G01]
gcode = 
	G1 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G02]
gcode = 
	G2 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G03]
gcode = 
	G2 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G04]
gcode = 
	G4 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

    [gcode_macro START_FILTER]
gcode = 
	{% set SPEED = params.SPEED|default(1)|float %}
	
	{% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
	SET_FAN_SPEED FAN={filter_name} SPEED={SPEED}

[gcode_macro STOP_FILTER]
gcode = 
	{% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
	SET_FAN_SPEED FAN={filter_name} SPEED=0

[delayed_gcode _STOP_FILTER_DELAYED]
gcode = 
	STOP_FILTER

    # Quand gantry leveling definition
# If this files is included, then it also activate the QGL
# automatically in the START_PRINT macro
[gcode_macro _USER_VARIABLES]
variable_qgl_enabled: True
gcode:

# Also include directly the dockable probe overide of qgl from here
[include macros/base/probing/overrides/qgl.cfg]
[include macros/base/homing/tilting.cfg]


[quad_gantry_level]
gantry_corners:
    -60,-10
    410,420
points:
    50,25
    50,275
    300,275
    300,25
speed: 350
horizontal_move_z: 12
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

# If this files is included, then it also activate the bed_mesh
# automatically in the START_PRINT macro
[gcode_macro _USER_VARIABLES]
variable_bed_mesh_enabled: True
gcode:

# Also include directly the dockable probe overide of BED_MESH_CALIBRATE from here
[include macros/base/probing/overrides/bed_mesh_calibrate.cfg]
# And also include the adaptive mesh macro at the same time
[include macros/calibration/adaptive_bed_mesh.cfg]


[bed_mesh]
speed: 350
horizontal_move_z: 20
mesh_min: 25, 25
mesh_max: 325, 325
probe_count: 9, 9
fade_start: 0.6
fade_end: 10.0
algorithm: bicubic
zero_reference_position: 175, 175