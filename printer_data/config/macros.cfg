[include mainsail.cfg]
[include KAMP_Settings.cfg]
[gcode_macro _CLIENT_VARIABLE]
[include thefilter.cfg]
variable_use_custom_pos   : False  #; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 10.0   #; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 10.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   #; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 3.0   #; the value to retract while PAUSE
variable_cancel_retract   : 5.0   #; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  #; retract speed in mm/s
variable_unretract        : 3.0   #; the value to unretract while RESUME
variable_speed_unretract  : 35.0  #; unretract speed in mm/s
variable_speed_hop        : 15.0  #; z move speed in mm/s
variable_speed_move       : 100.0 #; move speed in mm/s
variable_park_at_cancel   : True  #; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 175  #; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 350  #; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False  #; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     #; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    #; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    #; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    #; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    #; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

[gcode_macro _HOME_X]
gcode = 
	
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
	{% set HOME_CURRENT = 0.60%}
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	
	SET_KINEMATIC_POSITION X=15
	G91
	G1 X-15 F1200
	
	G4 P2000
	G28 X
	
	
	G91
	G1 X-15 F1200
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode = 
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
	{% set HOME_CURRENT =0.60%}
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	
	SET_KINEMATIC_POSITION Y=15
	G91
	G1 Y-15 F1200
	G4 P2000
	
	G28 Y
	
	G91
	G1 Y-15 F1200
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  # STATUS_HOMING                                         # Set LEDs to homing-mode
  M118 Homing
  _CG28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    # STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    # SET_PIN PIN=filter VALUE=1                      # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M109 S150  
    M190 S{target_bed}                                  # Set the target temp for the bed
    M118 Heating bed.
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    # STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P60000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  M118 Heating 
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 150c

  ##  Uncomment for Trident (QUAD_GANTRY_LEVEL)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  QUAD_GANTRY_LEVEL                                        # Level the printer via QUAD_GANTRY_LEVEL
  G28 Z                                                # Home Z again after QUAD_GANTRY_LEVEL

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  # STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE ADAPTIVE=1                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  SET_DISPLAY_TEXT MSG="Brushing" 
  # AFC_BRUSH
  SET_DISPLAY_TEXT MSG="Surveying" 
  CARTOGRAPHER_TOUCH                                    # Calibrate z offset only with hot nozzle
  # AFC_PARK
  
  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  # STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

 #Load initial filament
  SET_DISPLAY_TEXT MSG="Loading filament"
  T{initial_tool} #Load Initial Tool

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  # STATUS_PRINTING                                       # Set LEDs to printing-mode
  LINE_PURGE
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  # G1 X100 E20 F1000                                     # Primeline
  # AFC_POOP
  # AFC_KICK
  G90                                                   # Absolute position

# Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84

[gcode_macro g27]
description: Parks the toolhead.
  Usage: G27 [P=<0|1|2>]
gcode:
  # Wraps any arguments for the PARK macro and defaults P=0 for Marlin compat.
  PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
    ' '~k~'="'~params[k]~'"'
    }{% endfor %}
  
[gcode_macro M701]
description = Map M701 to LOAD_FILAMENT
gcode = 
	LOAD_FILAMENT

[gcode_macro M702]
description = Map M702 to UNLOAD_FILAMENT
gcode = 
	UNLOAD_FILAMENT

[gcode_macro M600]
description = Map M600 to CHANGE_FILAMENT
gcode = 
	CHANGE_FILAMENT

[gcode_macro M125]
description = Map M125 to PARK
gcode = 
	PARK

[gcode_macro M900]
description = Map M900 to SET_PRESSURE_ADVANCE
gcode = 
	{% if 'K' in params %}
	{% if 'E' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
	{% else %}
	SET_PRESSURE_ADVANCE ADVANCE={params.K}
	{% endif %}
	{% endif %}

[gcode_macro M204]
description = Map M204 to SET_VELOCITY_LIMIT for ACCEL
rename_existing = M204.1
gcode = 
	{% if 'S' in params %}
	{% set S = params.S|float %}
	SET_VELOCITY_LIMIT ACCEL={S}
	{% endif %}

[gcode_macro M205]
description = Map M205 to SET_VELOCITY_LIMIT for SQUARE_CORNER_VELOCITY
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
	{% elif 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
	{% endif %}

[gcode_macro G00]
gcode = 
	G0 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G01]
gcode = 
	G1 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G02]
gcode = 
	G2 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G03]
gcode = 
	G2 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G04]
gcode = 
	G4 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

    [gcode_macro START_FILTER]
gcode = 
	{% set SPEED = params.SPEED|default(1)|float %}
	
	{% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
	SET_FAN_SPEED FAN={filter_name} SPEED={SPEED}

[gcode_macro STOP_FILTER]
gcode = 
	{% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
	SET_FAN_SPEED FAN={filter_name} SPEED=0

[delayed_gcode _STOP_FILTER_DELAYED]
gcode = 
	STOP_FILTER

# [gcode_macro update_git]
# gcode:
#     {% set message = params.MESSAGE|default() %}
#     {% if message %}
#         RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
#     {% else %}
#         RUN_SHELL_COMMAND CMD=update_git_script
#     {% endif %}

# [gcode_shell_command update_git_script]
# command: bash -c "bash $HOME/klipper-backup/script.sh"
# timeout: 90.0
# verbose: True

# [gcode_shell_command update_git_script_message]
# command: bash -c "bash $HOME/klipper-backup/script.sh $0"
# timeout: 90.0
# verbose: True

[gcode_macro TAP_DATA]
gcode:
    G28
    G1 Z5 F1200
    M400 ; wait until motor movement finishes
    G4 P1000; wait a second so the printer doesn't shake
    CARTOGRAPHER_STREAM FILENAME=tapdata2mms.csv
    G1 Z-0.5 F120
    M400 ; wait until motor movement finishes
    G4 P1000; wait a second so the printer doesn't shake
    CARTOGRAPHER_STREAM FILENAME=tapdata2mms.csv
    G28
    G1 Z5 F1200
    M400 ; wait until motor movement finishes
    G4 P1000; wait a second so the printer doesn't shake
    CARTOGRAPHER_STREAM FILENAME=tapdata3mms.csv
    G1 Z-0.5 F200
    M400 ; wait until motor movement finishes
    G4 P1000; wait a second so the printer doesn't shake
    CARTOGRAPHER_STREAM FILENAME=tapdata3mms.csv
 
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

[gcode_macro DATA_SAMPLE]
gcode:
  {% set bed_temp = params.BED_TEMP|default(90)|int %}
  {% set nozzle_temp = params.NOZZLE_TEMP|default(250)|int %}
  {% set min_temp = params.MIN_TEMP|default(40)|int %}
  {% set max_temp = params.MAX_TEMP|default(70)|int %}
  G90
  M106 S255
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  RESPOND TYPE=command MSG='Starting Phase 1 of 4'
  M117 Starting Phase 1 of 4
  M106 S0
  G28
  G0 Z1
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={min_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 Starting Phase 2 of 4
  RESPOND TYPE=command MSG='Starting Phase 2 of 4'
  M106 S0
  G28 Z0
  G0 Z2
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data2
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data2
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 "Starting Phase 3 of 4"
  RESPOND TYPE=command MSG='Starting Phase 3 of 4'
  M106 S0
  G28 Z0
  G0 Z3
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data3
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data3
  M104 S0
  M140 S0
  RESPOND TYPE=command MSG='Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/cartographer-klipper/'
  M117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/cartographer-klipper/"
  RESPOND TYPE=command MSG='Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta'
  M117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}



            